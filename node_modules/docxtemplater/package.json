{
  "name": "docxtemplater",
  "version": "1.0.5",
  "author": {
    "name": "Edgar Hipp"
  },
  "description": ".docx generator working with templates and data (like Mustache)",
  "contributors": [
    {
      "name": "Edgar Hipp"
    }
  ],
  "main": "js/index.js",
  "bin": {
    "docxtemplater": "./js/cli.js"
  },
  "keywords": [
    "docx",
    "templates",
    "generation",
    "microsoft word"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/edi9999/docxtemplater"
  },
  "dependencies": {
    "jszip": "^2.4.0"
  },
  "devDependencies": {
    "angular-expressions": "~0.2.1",
    "gulp": "~3.8.0",
    "gulp-browserify": "^0.5.0",
    "gulp-coffee": "~2.0.1",
    "gulp-concat": "~2.2.0",
    "gulp-jasmine": "^0.2.0",
    "gulp-livereload": "~2.1.0",
    "gulp-notify": "^1.2.5",
    "gulp-rename": "^1.2.0",
    "gulp-uglify": "~0.3.0",
    "gulp-util": "~2.2.14",
    "gulp-watch": "~0.6.5"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10"
  },
  "scripts": {
    "test": "jasmine-node test/spec/docxgenTest.spec.js"
  },
  "readme": "# docxtemplater v1\n\n[![Build Status](https://travis-ci.org/edi9999/docxtemplater.svg?branch=master&style=flat)](https://travis-ci.org/edi9999/docxtemplater)\n[![Download count](http://img.shields.io/npm/dm/docxtemplater.svg?style=flat)](https://www.npmjs.org/package/docxtemplater)\n[![Current tag](http://img.shields.io/npm/v/docxtemplater.svg?style=flat)](https://www.npmjs.org/package/docxtemplater)\n[![Issues closed](http://issuestats.com/github/edi9999/docxtemplater/badge/issue?style=flat)](http://issuestats.com/github/edi9999/docxtemplater)\n\n![docxtemplater logo](https://raw.githubusercontent.com/edi9999/docxtemplater/master/logo_small.png)\n\n**docxtemplater** is a library to generate docx/pptx documents from a docx/pptx template.\nIt can replace {placeholders} with data and also supports loops and conditions.\nThe templates can be edited by non-programmers, eg for example your clients.\n\n## Features\n\n[Demo Site](http://javascript-ninja.fr/docxtemplater/v1/examples/demo.html)\n\n- <a href=\"http://javascript-ninja.fr/docxtemplater/v1/examples/demo.html#variables\">Replace a {placeholder} by a value</a>\n- <a href=\"http://javascript-ninja.fr/docxtemplater/v1/examples/demo.html#loops\">Use loops: {#users} {name} {/users} </a>\n- <a href=\"http://javascript-ninja.fr/docxtemplater/v1/examples/demo.html#tables\">Use loops in tables to generate columns</a>\n- <a href=\"http://javascript-ninja.fr/docxtemplater/v1/examples/demo.html#parsing\">Use expressions {product.unit_price*product.count} with angular Parsing</a>\n- <a href=\"http://javascript-ninja.fr/docxtemplater/v1/examples/demo.html#images\">Replace {%images}</a>\n- <a href=\"http://javascript-ninja.fr/docxtemplater/v1/examples/demo.html#rawxml\">Insert custom XML {@rawXml} (for formatted text for example)</a>\n\n\n## Quickstart in Node\n\nInstallation: `npm install docxtemplater`\n\n    fs=require(‘fs’)\n    Docxtemplater = require('docxtemplater');\n\n    //Load the docx file as a binary\n    content = fs\n        .readFileSync(__dirname+\"/input.docx\",\"binary\")\n\n    doc=new Docxtemplater(content);\n\n    //set the templateVariables\n    doc.setData({\n        \"first_name\":\"Hipp\",\n        \"last_name\":\"Edgar\",\n        \"phone\":\"0652455478\",\n        \"description\":\"New Website\"\n    });\n\n    //apply them (replace all occurences of {first_name} by Hipp, ...)\n    doc.render();\n\n    var buf = doc.getZip()\n                 .generate({type:\"nodebuffer\"});\n\n    fs.writeFileSync(__dirname+\"/output.docx\",buf);\n\nYou can download [input.docx](https://github.com/edi9999/docxtemplater/raw/master/examples/tagExample.docx) and put it in the same folder than your script.\n\n## Quickstart in the browser\n\nInstallation:\n\n    git clone git@github.com:edi9999/docxtemplater.git && cd docxtemplater\n    # git checkout v1.0.4 # Optional\n    npm install -g gulp jasmine-node uglify-js browserify\n    npm install\n    gulp allCoffee\n    mkdir build -p\n    browserify -r ./js/docxgen.js -s Docxgen > build/docxgen.js\n    uglifyjs build/docxgen.js > build/docxgen.min.js # Optional\n\nThe -s Docxgen will export docxgen to window.Docxgen for easy usage (on some systems, it might export it in window.docxgen (see https://github.com/edi9999/docxtemplater/issues/118))\n\ncreate demo.html\n\n\n    <html>\n        <script src=\"build/docxgen.js\"></script>\n        <script src=\"vendor/FileSaver.min.js\"></script>\n        <script src=\"vendor/jszip-utils.js\"></script>\n        <!--\n        Mandatory in IE 6, 7, 8 and 9.\n        -->\n        <!--[if IE]>\n            <script type=\"text/javascript\" src=\"examples/vendor/jszip-utils-ie.js\"></script>\n        <![endif]-->\n        <script>\n        var loadFile=function(url,callback){\n            JSZipUtils.getBinaryContent(url,callback);\n        }\n        loadFile(\"examples/tagExample.docx\",function(err,content){\n            if (err) { throw e};\n            doc=new Docxgen(content);\n            doc.setData( {\"first_name\":\"Hipp\",\n                \"last_name\":\"Edgar\",\n                \"phone\":\"0652455478\",\n                \"description\":\"New Website\"\n                }\n            ) //set the templateVariables\n            doc.render() //apply them (replace all occurences of {first_name} by Hipp, ...)\n            out=doc.getZip().generate({type:\"blob\"}) //Output the document using Data-URI\n            saveAs(out,\"output.docx\")\n        })\n        </script>\n    </html>\n\n## Documentation\n\nThe full documentation of v1 can be found on [read the docs](http://docxtemplater.readthedocs.org/en/latest/).\n\nSee [upgrade.md](upgrade.md) for information about how to migrate from 0.7\n\n## Similar libraries\n\nThey are a few similar libraries that work with docx, here’s a list of those I know a bit about:\n\n * docx4j :JAVA, this is probably the biggest docx library out there. They is no built in templating engine, but you can generate your docx yourself programmatically\n * docx.js: Javascript in the browser, you can create (not modify) your docx from scratch, but only do very simple things such as adding non formatted text\n * xlsx-templater : its working quite well, does the same as here but for xlsx\n\n# Modules\n\nFunctionality can be added with modules. They is yet no doc for the modules because it is not completely mature yet, but you can open an issue if you have any question about it.\nI have already created one module that can add images using the syntax: `{%image}`, which is documented here: https://github.com/edi9999/docxtemplater-image-module\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/edi9999/docxtemplater/issues"
  },
  "_id": "docxtemplater@1.0.5",
  "dist": {
    "shasum": "36da2062a690a7511d2397b3eee7fe3bf6cde73f"
  },
  "_from": "docxtemplater@",
  "_resolved": "https://registry.npmjs.org/docxtemplater/-/docxtemplater-1.0.5.tgz"
}
