{
  "name": "pipedrive",
  "version": "1.7.2",
  "description": "Pipedrive REST client for NodeJS",
  "keywords": [
    "pipedrive",
    "CRM",
    "sales",
    "contacts",
    "customers",
    "deals",
    "pipeline",
    "sales pipeline"
  ],
  "homepage": "https://github.com/pipedrive/client-nodejs",
  "main": "./lib/Pipedrive",
  "engines": {
    "node": ">= 0.8.x"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/pipedrive/client-nodejs.git"
  },
  "dependencies": {
    "qs": "~2.1.0",
    "lodash": "~2.4.1",
    "fetch": "~0.3.6",
    "mime": "~1.2.11",
    "async": "~0.9.0"
  },
  "readme": "# Pipedrive client for NodeJS based apps\n\n[![NPM version](https://badge.fury.io/js/pipedrive.svg)](http://badge.fury.io/js/pipedrive)\n\nPipedrive is a sales pipeline software that gets you organized. It's a powerful sales CRM with effortless sales pipeline management. See www.pipedrive.com for details.\n\nThis is the official Pipedrive API wrapper-client for NodeJS based apps, distributed by Pipedrive Inc freely under the MIT licence. It provides you with basic functionality for operating with objects such as Deals, Persons, Organizations, Products and much more, without having to worry about the underlying networking stack and actual HTTPS requests.\n\n# Install\n\n```\nnpm install pipedrive\n```\n\n# Usage\n\nWith a pre-set API token:\n```js\nvar Pipedrive = require('pipedrive');\nvar pipedrive = new Pipedrive.Client('YOUR_API_TOKEN_HERE');\n```\n\n# A simple \"Hello world\" that lists some deals\n\nHere's a quick example that will list some deals from your Pipedrive account:\n\n```js\nvar Pipedrive = require('pipedrive');\nvar pipedrive = new Pipedrive.Client('YOUR_API_TOKEN_HERE');\n\npipedrive.Deals.getAll({}, function(err, deals) {\n\tif (err) throw err;\n\tfor (var i = 0; i < deals.length; i++) {\n\t\tconsole.log(deals[i].title + ' (worth ' + deals[i].value + ' ' + deals[i].currency + ')');\n\t}\n});\n```\n\n# Supported objects\n\n * Activities\n * ActivityTypes\n * Authorizations\n * Currencies\n * Deals\n * DealFields\n * Files\n * Filters\n * Notes\n * Organizations\n * OrganizationFields\n * Persons\n * PersonFields\n * Pipelines\n * Products\n * ProductFields\n * SearchResults\n * Stages\n * Users\n\n# Authorization against email and password\n\n### Pipedrive.authenticate({ email: 'john@doe.com', password: 'example' }, [fn callback]);\nFetches the possible API tokens for the given user against email and password, passing ```error, data, additionalData``` to the callback function. You can use the API tokens returned by this method to instantiate the API client by issuing ```var pipedrive = new Pipedrive.Client('API_TOKEN_HERE')```.\n\n# Supported operations for object collections\n\n### pipedrive.{Object}.add (data, [fn callback])\nAdd an object. Returns ```error, data``` to the callback where data contains the ```id``` property of the newly created item.\n\n### pipedrive.{Object}.get (id, [fn callback])\nGet specific object. Returns ```error, object```\n\n### pipedrive.{Object}.update (id, data, [fn callback])\nUpdate an object. Returns ```error``` in case of an error to the callback.\n\n### pipedrive.{Object}.getAll (params, [fn callback])\nGet all objects, optionally passing additional parameters (such as ```filter_id``` in case of deals, persons and organizations). Returns ```error, objects``` to the callback function where objects is a collection (array) of objects.\n\n### pipedrive.{Object}.remove (id, [fn callback])\nDelete an object with a specifc ID. Returns ```error``` in case of an error to the callback.\n\n### pipedrive.{Object}.removeMany ([Array ids], [fn callback])\nDelete multiple objects using an array of IDs. Returns ```error``` in case of an error to the callback.\n\n### pipedrive.{Object}.merge (whichId, withId, [fn callback])\nMerge two objects of the same kind. Returns ```error``` in case of an error to the callback. Merge is only supported for the following objects:\n * Persons\n * Organizations\n * Users\n\n# Supported operations for each object\n\n### {object}.get(fieldName)\nReturns the value of [fieldName] of the object.\n\n### {object}.set(fieldName, newValue)\nSets a new value of [fieldName] of the object. Returns {object}.\n\n### {object}.save([fn callback])\nUpdates the state of the {object} in Pipedrive via the API. Returns {object}.\n\n### {object}.remove([fn callback])\nDeletes the {object} in Pipedrive via the API. Returns ```error``` in case of an error to the callback.\n\n### {object}.merge(withId, [fn callback])\nMerges the {object} with another object of the same kind with the ID given as ```withId```. Returns ```error``` in case of error to the callback. Merge is only supported for the following objects:\n * Persons\n * Organizations\n * Users\n\n# Operations with nested objects\n\n## Adding a product to a deal\n\nTo add a product to a deal, simply invoke the ```addProduct``` method on a deal object.\n```js\npipedrive.Deals.get(1, function(err, deal) {\n\tif (err) throw err;\n\tdeal.addProduct({ product_id: 1, quantity: 5, discount: 20 }, function(addErr, addData) {\n\t\tif (addErr) throw addErr;\n\t\tconsole.log('Product 1 was added to deal 1', addData);\n\t});\n})\n```\n## You can add multiple products with a single request, too.\n\nTo add multiple products with a single request, make the first argument of deal's ```addProduct``` method (as shown above) an array, e.g. ```[{ product_id: 1, quantity: 5, discount: 0 }, { product_id: 1, quantity: 2, discount: 20 }]```. This will add two product rows to a deal — one with a quantity of 5 and with no discount, the latter will add a separate row for the same product but with a quantity of 2 and no discount.\n\n## Delete a product from a deal\n```js\npipedrive.Deals.get(deal_id, function(err, deal) {\n\tif (err) throw err;\n\tdeal.getProducts(function(productsErr, attachedProducts) {\n\t\tif (productsErr) throw productsErr;\n\t\tattachedProducts.forEach(function(attachedProduct) {\n\t\t\tdeal.deleteProduct({ id: attachedProduct.id }, function(removeErr, removeSuccess) {\n\t\t\t\tif (!removeErr) console.log('Removed product ' + attachedProduct.product_id + ' from deal 1');\n\t\t\t});\n\t\t});\n\t});\n})\n```\n\n## Search for field value matches\n\nThere is an additional method to perform the `SearchResults/field` search. This can be used for field-value searches.\n\nThe following example searches for deals that match the condition where `org_id=123`\n\n```js\npipedrive.SearchResults.field({\n\tterm: \"123\",\n\texact_match: true,\n\tfield_key: \"org_id\",\n\tfield_type: \"dealField\",\n\treturn_item_ids: true\n}), callback);\n```\n\n * **term** — the string you are searching for from field values\n * **exact_match** (optional, default false) — whether the term you supply is the entire and exact match you are looking for (if set to false, partial results are also considered a match)\n * **field_key** — name of the field you are searching from\n * **field_type** — type of the field you are searching from (supported types: dealField, personField, organizationField, productField)\n * **return_item_ids** (optional, default false) — if set to true, individual items that have the matching term in the given field are given; if set to false, the different distinct values that match your search term across all different values in the gievn field are given. Usually you would want this to be set to true. However, for searching across autocomplete_text type fields (such as lost_reason of dealFields), you might want to show different values that pre-exist already.\n * **start** (optional, default 0) – results pagination start\n * **limit** (optional, default 100) — results pagination limit\n\n## Retrieve all records for a given object type:\n\nYou can request all entries for an valid object using `getAll(object, callback)`\n\n```js\npipedrive.getAll('Organizatons', function (err, collection) {\n\t// collection contains all Organizations\n});\n\npipedrive.getAll('Persons', function (err, collection) {\n\t// collection contains all Persons\n});\n```\n\n# Examples\n\n## Get 15 first deals using the first deals filter\n\n```js\nvar Pipedrive = require('pipedrive');\nvar pipedrive = new Pipedrive.Client('PUT_YOUR_API_TOKEN_HERE');\n\npipedrive.Filters.getAll({ type: 'deals' }, function(filtersListErr, filtersList) {\n\n\tif (filtersList.length > 0) {\n\t\tpipedrive.Deals.getAll({ filter_id: filtersList[0].get('id'), start: 0, limit: 15 }, function(dealsListErr, dealsList) {\n\n\t\t\tdealsList.forEach(function(deal) {\n\t\t\t\tconsole.log(deal.get('title') + ' (worth ' + deal.get('value') + ' ' + deal.get('currency') + ')');\n\t\t\t});\n\n\t\t})\n\t}\n\n});\n```\n\n# Actions not supported\n\n * Adding followers to organizations/persons/users\n\n# API Documentation\n\nThe Pipedrive REST API documentation can be found at https://developers.pipedrive.com/v1\n\n# Licence\n\nThis Pipedrive API client is distributed under the MIT licence.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pipedrive/client-nodejs/issues"
  },
  "_id": "pipedrive@1.7.2",
  "_from": "pipedrive@*"
}
